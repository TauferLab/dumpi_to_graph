#ifndef D2G_REQUEST_H
#define D2G_REQUEST_H

#include <string>
#include <iostream>

#include "Channel.hpp"

// Representation of an MPI_Request handle:
// Each MPI_Request is generated by and associated with a call of an MPI 
// communication function (e.g., MPI_Isend or MPI_Irecv) that return immediately
// and is later completed explicitly by passing the associated MPI_Request 
// handle to another function, such as MPI_Wait. 
// We store information about the initial call (e.g., an MPI_Irecv) in the 
// Request so that later on, when we encounter the record of its completing call
// (e.g., an MPI_Wait) in the trace, we can look up which communication channel
// the message was in
class Request
{
public:
  Request() {}
  Request( int id ) : id(id) {}
  virtual ~Request() {}
  int get_id() const;
  friend std::ostream& operator<<( std::ostream& out, const Request& rhs )
  {
    out << "Request: ID: " << rhs.get_id();
    return out;
  }
private:
  int id;
};

class NonblockingCommunicationRequest : public Request
{
public:
  NonblockingCommunicationRequest(int id, const Channel& channel) :
    Request(id),
    channel(channel)
    {}
  virtual ~NonblockingCommunicationRequest() {}
  // Accessors
  const Channel& get_channel() const;
  bool is_cancelled() const;
  // Request cancellation
  void cancel();
private:
  Channel channel;
  bool cancelled = false;
};

class IsendRequest : public NonblockingCommunicationRequest
{
public:
  IsendRequest(int id, const Channel& channel) :
    NonblockingCommunicationRequest(id, channel)
    {}
  friend std::ostream& operator<<( std::ostream& out, const IsendRequest& rhs )
  {
    out << "Isend Request: ID: " << rhs.get_id() 
        << ", Channel: " << rhs.get_channel();
    return out;
  }
private:
};

class IrecvRequest : public NonblockingCommunicationRequest
{
public:
  IrecvRequest( int id, const Channel& channel) :
    NonblockingCommunicationRequest(id, channel)
    {}
  friend std::ostream& operator<<( std::ostream& out, const IrecvRequest& rhs )
  {
    out << "Irecv Request: ID: " << rhs.get_id() 
        << ", Channel: " << rhs.get_channel();
    return out;
  }
private:
};

//enum class RequestType : int { irecv     = 0, 
//                               isend     = 1, 
//                               recv_init = 2, 
//                               send_init = 3
//                             };
//
//enum class RequestState : int { active    = 0, 
//                                inactive  = 1, 
//                                cancelled = 2 
//                              };
//
//// Main request properties class
//typedef struct request_properties {
//  RequestType type;
//  RequestState state;
//  channel_t channel;
//  
//  request_properties(RequestType type, RequestState state, channel_t channel) :
//    type(type), state(state), channel(channel) {}
//
//  // Function for marking a request for cancellation. 
//  void cancel()
//  {
//    state = RequestState::cancelled; 
//  }
//
//  // Function for starting an inactive request 
//  void start()
//  {
//    state = RequestState::active; 
//  }
//
//  // Helper function for outputting request type
//  std::string RequestType_to_string(RequestType type);
//
//  // Helper function for outputting request state
//  std::string RequestState_to_string(RequestState state);
//
//  // iostream convenience
//  friend std::ostream& operator<< (std::ostream& out, const request_properties& props)
//  {
//    out << "Type: " << (int)props.type << ", " 
//        << "State: " << (int)props.state << ", "
//        << "Channel: " << props.channel; 
//    return out; 
//  }
//
//} req_props_t; 

#endif // D2G_REQUEST_H 
